/**
 * Generated by apidoc - http://www.apidoc.me
 *
 * NB: I've removed the Bindables object, to remove dependency on Play
 *     We only need SinkEvent and ChangeEvent from this client
 *
 * Service version: 0.0.1-dev
 * apidoc:0.9.41 http://www.apidoc.me/gilt/calatrava/0.0.1-dev/play_2_x_json
 */
package com.gilt.calatrava.v0.models {

  /**
   * Authorization information for a user
   */
  case class Auth(
    token: String,
    expires: _root_.org.joda.time.DateTime
  )

  case class AwsSink(
    kinesisStreamName: String,
    kinesisEndpoint: String,
    s3BucketName: String,
    iamRoleArn: String
  )

  /**
   * The representation of a bridge for event changes. On source table change trigger
   * generates change events which are stored in log table and then published to
   * Kinesis.
   */
  case class Bridge(
    id: String,
    databaseId: String,
    source: com.gilt.calatrava.v0.models.Table,
    trigger: com.gilt.calatrava.v0.models.Trigger,
    log: com.gilt.calatrava.v0.models.Table,
    sink: com.gilt.calatrava.v0.models.AwsSink,
    status: com.gilt.calatrava.v0.models.Status,
    pagerDutyServiceKey: _root_.scala.Option[String] = None
  )

  /**
   * All data required to activate event streaming on specific database table.
   */
  case class BridgeForm(
    databaseId: String,
    source: com.gilt.calatrava.v0.models.Table,
    log: com.gilt.calatrava.v0.models.Table,
    sink: com.gilt.calatrava.v0.models.AwsSink,
    pagerDutyServiceKey: _root_.scala.Option[String] = None
  )

  case class ChangeEvent(
    id: String,
    entityKey: _root_.scala.Option[String] = None,
    beforeJson: _root_.scala.Option[String] = None,
    afterJson: _root_.scala.Option[String] = None,
    timestamp: _root_.org.joda.time.DateTime
  )

  case class Database(
    id: String,
    organizationId: String,
    connectionString: String,
    user: String,
    password: String,
    dbType: com.gilt.calatrava.v0.models.DbType
  )

  /**
   * The form used to create a new database.
   */
  case class DatabaseForm(
    organizationId: String,
    connectionString: String,
    user: String,
    password: String,
    dbType: com.gilt.calatrava.v0.models.DbType
  )

  case class Error(
    code: String,
    message: String
  )

  case class Healthcheck(
    status: String
  )

  case class Info(
    name: String,
    version: String,
    scalaVersion: String,
    sbtVersion: String
  )

  /**
   * A structure to contain result of getting log entries
   */
  case class LogEntriesResult(
    entries: Seq[com.gilt.calatrava.v0.models.LogEntry],
    totalCount: Int,
    filterCount: Int
  )

  /**
   * A log entry for the bridge log.
   */
  case class LogEntry(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    level: com.gilt.calatrava.v0.models.LogLevel,
    message: String,
    before: _root_.scala.Option[String] = None,
    after: _root_.scala.Option[String] = None
  )

  /**
   * The form used for logging in.
   */
  case class LoginForm(
    email: String,
    password: String
  )

  case class Organization(
    id: String,
    name: String
  )

  /**
   * The form used to reset a user's password.
   */
  case class PasswordResetForm(
    password: String,
    token: String
  )

  case class SinkEvent(
    event: _root_.scala.Option[com.gilt.calatrava.v0.models.ChangeEvent] = None,
    eventObjectKey: _root_.scala.Option[String] = None
  )

  case class Table(
    schema: String,
    name: String
  )

  case class Trigger(
    enableCode: String,
    disableCode: String
  )

  /**
   * A user is a real-world person who is using the Calatrava service. The user signs
   * up for Calatrava, and then interacts with the service through the APIs. Every
   * call to the API needs to use a token that is obtained after a successful login.
   */
  case class User(
    firstName: String,
    lastName: String,
    email: String
  )

  /**
   * The form used to create a new user.
   */
  case class UserCreateForm(
    firstName: String,
    lastName: String,
    password: String,
    confirmationToken: String
  )

  /**
   * The form used for passing an email (register, forgot password, user add, user
   * remove).
   */
  case class UserEmailForm(
    email: String
  )

  /**
   * A form for updating a user information.
   */
  case class UserUpdateForm(
    firstName: _root_.scala.Option[String] = None,
    lastName: _root_.scala.Option[String] = None,
    password: _root_.scala.Option[String] = None
  )

  sealed trait DbType

  object DbType {

    case object Postgres92 extends DbType { override def toString = "postgres92+" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends DbType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Postgres92)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): DbType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[DbType] = byName.get(value.toLowerCase)

  }

  sealed trait LogLevel

  object LogLevel {

    case object Debug extends LogLevel { override def toString = "debug" }
    case object Info extends LogLevel { override def toString = "info" }
    case object Warn extends LogLevel { override def toString = "warn" }
    case object Error extends LogLevel { override def toString = "error" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends LogLevel

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Debug, Info, Warn, Error)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): LogLevel = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[LogLevel] = byName.get(value.toLowerCase)

  }

  sealed trait Status

  object Status {

    case object Enabled extends Status { override def toString = "enabled" }
    case object Disabled extends Status { override def toString = "disabled" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Status

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Enabled, Disabled)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Status = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Status] = byName.get(value.toLowerCase)

  }

}

package com.gilt.calatrava.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.gilt.calatrava.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsCalatravaDbType = __.read[String].map(DbType.apply)
    implicit val jsonWritesCalatravaDbType = new Writes[DbType] {
      def writes(x: DbType) = JsString(x.toString)
    }

    implicit val jsonReadsCalatravaLogLevel = __.read[String].map(LogLevel.apply)
    implicit val jsonWritesCalatravaLogLevel = new Writes[LogLevel] {
      def writes(x: LogLevel) = JsString(x.toString)
    }

    implicit val jsonReadsCalatravaStatus = __.read[String].map(Status.apply)
    implicit val jsonWritesCalatravaStatus = new Writes[Status] {
      def writes(x: Status) = JsString(x.toString)
    }

    implicit def jsonReadsCalatravaAuth: play.api.libs.json.Reads[Auth] = {
      (
        (__ \ "token").read[String] and
        (__ \ "expires").read[_root_.org.joda.time.DateTime]
      )(Auth.apply _)
    }

    implicit def jsonWritesCalatravaAuth: play.api.libs.json.Writes[Auth] = {
      (
        (__ \ "token").write[String] and
        (__ \ "expires").write[_root_.org.joda.time.DateTime]
      )(unlift(Auth.unapply _))
    }

    implicit def jsonReadsCalatravaAwsSink: play.api.libs.json.Reads[AwsSink] = {
      (
        (__ \ "kinesis_stream_name").read[String] and
        (__ \ "kinesis_endpoint").read[String] and
        (__ \ "s3_bucket_name").read[String] and
        (__ \ "iam_role_arn").read[String]
      )(AwsSink.apply _)
    }

    implicit def jsonWritesCalatravaAwsSink: play.api.libs.json.Writes[AwsSink] = {
      (
        (__ \ "kinesis_stream_name").write[String] and
        (__ \ "kinesis_endpoint").write[String] and
        (__ \ "s3_bucket_name").write[String] and
        (__ \ "iam_role_arn").write[String]
      )(unlift(AwsSink.unapply _))
    }

    implicit def jsonReadsCalatravaBridge: play.api.libs.json.Reads[Bridge] = {
      (
        (__ \ "id").read[String] and
        (__ \ "database_id").read[String] and
        (__ \ "source").read[com.gilt.calatrava.v0.models.Table] and
        (__ \ "trigger").read[com.gilt.calatrava.v0.models.Trigger] and
        (__ \ "log").read[com.gilt.calatrava.v0.models.Table] and
        (__ \ "sink").read[com.gilt.calatrava.v0.models.AwsSink] and
        (__ \ "status").read[com.gilt.calatrava.v0.models.Status] and
        (__ \ "pager_duty_service_key").readNullable[String]
      )(Bridge.apply _)
    }

    implicit def jsonWritesCalatravaBridge: play.api.libs.json.Writes[Bridge] = {
      (
        (__ \ "id").write[String] and
        (__ \ "database_id").write[String] and
        (__ \ "source").write[com.gilt.calatrava.v0.models.Table] and
        (__ \ "trigger").write[com.gilt.calatrava.v0.models.Trigger] and
        (__ \ "log").write[com.gilt.calatrava.v0.models.Table] and
        (__ \ "sink").write[com.gilt.calatrava.v0.models.AwsSink] and
        (__ \ "status").write[com.gilt.calatrava.v0.models.Status] and
        (__ \ "pager_duty_service_key").writeNullable[String]
      )(unlift(Bridge.unapply _))
    }

    implicit def jsonReadsCalatravaBridgeForm: play.api.libs.json.Reads[BridgeForm] = {
      (
        (__ \ "database_id").read[String] and
        (__ \ "source").read[com.gilt.calatrava.v0.models.Table] and
        (__ \ "log").read[com.gilt.calatrava.v0.models.Table] and
        (__ \ "sink").read[com.gilt.calatrava.v0.models.AwsSink] and
        (__ \ "pager_duty_service_key").readNullable[String]
      )(BridgeForm.apply _)
    }

    implicit def jsonWritesCalatravaBridgeForm: play.api.libs.json.Writes[BridgeForm] = {
      (
        (__ \ "database_id").write[String] and
        (__ \ "source").write[com.gilt.calatrava.v0.models.Table] and
        (__ \ "log").write[com.gilt.calatrava.v0.models.Table] and
        (__ \ "sink").write[com.gilt.calatrava.v0.models.AwsSink] and
        (__ \ "pager_duty_service_key").writeNullable[String]
      )(unlift(BridgeForm.unapply _))
    }

    implicit def jsonReadsCalatravaChangeEvent: play.api.libs.json.Reads[ChangeEvent] = {
      (
        (__ \ "id").read[String] and
        (__ \ "entity_key").readNullable[String] and
        (__ \ "before_json").readNullable[String] and
        (__ \ "after_json").readNullable[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
      )(ChangeEvent.apply _)
    }

    implicit def jsonWritesCalatravaChangeEvent: play.api.libs.json.Writes[ChangeEvent] = {
      (
        (__ \ "id").write[String] and
        (__ \ "entity_key").writeNullable[String] and
        (__ \ "before_json").writeNullable[String] and
        (__ \ "after_json").writeNullable[String] and
        (__ \ "timestamp").write[_root_.org.joda.time.DateTime]
      )(unlift(ChangeEvent.unapply _))
    }

    implicit def jsonReadsCalatravaDatabase: play.api.libs.json.Reads[Database] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization_id").read[String] and
        (__ \ "connection_string").read[String] and
        (__ \ "user").read[String] and
        (__ \ "password").read[String] and
        (__ \ "db_type").read[com.gilt.calatrava.v0.models.DbType]
      )(Database.apply _)
    }

    implicit def jsonWritesCalatravaDatabase: play.api.libs.json.Writes[Database] = {
      (
        (__ \ "id").write[String] and
        (__ \ "organization_id").write[String] and
        (__ \ "connection_string").write[String] and
        (__ \ "user").write[String] and
        (__ \ "password").write[String] and
        (__ \ "db_type").write[com.gilt.calatrava.v0.models.DbType]
      )(unlift(Database.unapply _))
    }

    implicit def jsonReadsCalatravaDatabaseForm: play.api.libs.json.Reads[DatabaseForm] = {
      (
        (__ \ "organization_id").read[String] and
        (__ \ "connection_string").read[String] and
        (__ \ "user").read[String] and
        (__ \ "password").read[String] and
        (__ \ "db_type").read[com.gilt.calatrava.v0.models.DbType]
      )(DatabaseForm.apply _)
    }

    implicit def jsonWritesCalatravaDatabaseForm: play.api.libs.json.Writes[DatabaseForm] = {
      (
        (__ \ "organization_id").write[String] and
        (__ \ "connection_string").write[String] and
        (__ \ "user").write[String] and
        (__ \ "password").write[String] and
        (__ \ "db_type").write[com.gilt.calatrava.v0.models.DbType]
      )(unlift(DatabaseForm.unapply _))
    }

    implicit def jsonReadsCalatravaError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    implicit def jsonWritesCalatravaError: play.api.libs.json.Writes[Error] = {
      (
        (__ \ "code").write[String] and
        (__ \ "message").write[String]
      )(unlift(Error.unapply _))
    }

    implicit def jsonReadsCalatravaHealthcheck: play.api.libs.json.Reads[Healthcheck] = {
      (__ \ "status").read[String].map { x => new Healthcheck(status = x) }
    }

    implicit def jsonWritesCalatravaHealthcheck: play.api.libs.json.Writes[Healthcheck] = new play.api.libs.json.Writes[Healthcheck] {
      def writes(x: Healthcheck) = play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.Json.toJson(x.status)
      )
    }

    implicit def jsonReadsCalatravaInfo: play.api.libs.json.Reads[Info] = {
      (
        (__ \ "name").read[String] and
        (__ \ "version").read[String] and
        (__ \ "scalaVersion").read[String] and
        (__ \ "sbtVersion").read[String]
      )(Info.apply _)
    }

    implicit def jsonWritesCalatravaInfo: play.api.libs.json.Writes[Info] = {
      (
        (__ \ "name").write[String] and
        (__ \ "version").write[String] and
        (__ \ "scalaVersion").write[String] and
        (__ \ "sbtVersion").write[String]
      )(unlift(Info.unapply _))
    }

    implicit def jsonReadsCalatravaLogEntriesResult: play.api.libs.json.Reads[LogEntriesResult] = {
      (
        (__ \ "entries").read[Seq[com.gilt.calatrava.v0.models.LogEntry]] and
        (__ \ "total_count").read[Int] and
        (__ \ "filter_count").read[Int]
      )(LogEntriesResult.apply _)
    }

    implicit def jsonWritesCalatravaLogEntriesResult: play.api.libs.json.Writes[LogEntriesResult] = {
      (
        (__ \ "entries").write[Seq[com.gilt.calatrava.v0.models.LogEntry]] and
        (__ \ "total_count").write[Int] and
        (__ \ "filter_count").write[Int]
      )(unlift(LogEntriesResult.unapply _))
    }

    implicit def jsonReadsCalatravaLogEntry: play.api.libs.json.Reads[LogEntry] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "level").read[com.gilt.calatrava.v0.models.LogLevel] and
        (__ \ "message").read[String] and
        (__ \ "before").readNullable[String] and
        (__ \ "after").readNullable[String]
      )(LogEntry.apply _)
    }

    implicit def jsonWritesCalatravaLogEntry: play.api.libs.json.Writes[LogEntry] = {
      (
        (__ \ "id").write[String] and
        (__ \ "timestamp").write[_root_.org.joda.time.DateTime] and
        (__ \ "level").write[com.gilt.calatrava.v0.models.LogLevel] and
        (__ \ "message").write[String] and
        (__ \ "before").writeNullable[String] and
        (__ \ "after").writeNullable[String]
      )(unlift(LogEntry.unapply _))
    }

    implicit def jsonReadsCalatravaLoginForm: play.api.libs.json.Reads[LoginForm] = {
      (
        (__ \ "email").read[String] and
        (__ \ "password").read[String]
      )(LoginForm.apply _)
    }

    implicit def jsonWritesCalatravaLoginForm: play.api.libs.json.Writes[LoginForm] = {
      (
        (__ \ "email").write[String] and
        (__ \ "password").write[String]
      )(unlift(LoginForm.unapply _))
    }

    implicit def jsonReadsCalatravaOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String]
      )(Organization.apply _)
    }

    implicit def jsonWritesCalatravaOrganization: play.api.libs.json.Writes[Organization] = {
      (
        (__ \ "id").write[String] and
        (__ \ "name").write[String]
      )(unlift(Organization.unapply _))
    }

    implicit def jsonReadsCalatravaPasswordResetForm: play.api.libs.json.Reads[PasswordResetForm] = {
      (
        (__ \ "password").read[String] and
        (__ \ "token").read[String]
      )(PasswordResetForm.apply _)
    }

    implicit def jsonWritesCalatravaPasswordResetForm: play.api.libs.json.Writes[PasswordResetForm] = {
      (
        (__ \ "password").write[String] and
        (__ \ "token").write[String]
      )(unlift(PasswordResetForm.unapply _))
    }

    implicit def jsonReadsCalatravaSinkEvent: play.api.libs.json.Reads[SinkEvent] = {
      (
        (__ \ "event").readNullable[com.gilt.calatrava.v0.models.ChangeEvent] and
        (__ \ "event_object_key").readNullable[String]
      )(SinkEvent.apply _)
    }

    implicit def jsonWritesCalatravaSinkEvent: play.api.libs.json.Writes[SinkEvent] = {
      (
        (__ \ "event").writeNullable[com.gilt.calatrava.v0.models.ChangeEvent] and
        (__ \ "event_object_key").writeNullable[String]
      )(unlift(SinkEvent.unapply _))
    }

    implicit def jsonReadsCalatravaTable: play.api.libs.json.Reads[Table] = {
      (
        (__ \ "schema").read[String] and
        (__ \ "name").read[String]
      )(Table.apply _)
    }

    implicit def jsonWritesCalatravaTable: play.api.libs.json.Writes[Table] = {
      (
        (__ \ "schema").write[String] and
        (__ \ "name").write[String]
      )(unlift(Table.unapply _))
    }

    implicit def jsonReadsCalatravaTrigger: play.api.libs.json.Reads[Trigger] = {
      (
        (__ \ "enable_code").read[String] and
        (__ \ "disable_code").read[String]
      )(Trigger.apply _)
    }

    implicit def jsonWritesCalatravaTrigger: play.api.libs.json.Writes[Trigger] = {
      (
        (__ \ "enable_code").write[String] and
        (__ \ "disable_code").write[String]
      )(unlift(Trigger.unapply _))
    }

    implicit def jsonReadsCalatravaUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "first_name").read[String] and
        (__ \ "last_name").read[String] and
        (__ \ "email").read[String]
      )(User.apply _)
    }

    implicit def jsonWritesCalatravaUser: play.api.libs.json.Writes[User] = {
      (
        (__ \ "first_name").write[String] and
        (__ \ "last_name").write[String] and
        (__ \ "email").write[String]
      )(unlift(User.unapply _))
    }

    implicit def jsonReadsCalatravaUserCreateForm: play.api.libs.json.Reads[UserCreateForm] = {
      (
        (__ \ "first_name").read[String] and
        (__ \ "last_name").read[String] and
        (__ \ "password").read[String] and
        (__ \ "confirmation_token").read[String]
      )(UserCreateForm.apply _)
    }

    implicit def jsonWritesCalatravaUserCreateForm: play.api.libs.json.Writes[UserCreateForm] = {
      (
        (__ \ "first_name").write[String] and
        (__ \ "last_name").write[String] and
        (__ \ "password").write[String] and
        (__ \ "confirmation_token").write[String]
      )(unlift(UserCreateForm.unapply _))
    }

    implicit def jsonReadsCalatravaUserEmailForm: play.api.libs.json.Reads[UserEmailForm] = {
      (__ \ "email").read[String].map { x => new UserEmailForm(email = x) }
    }

    implicit def jsonWritesCalatravaUserEmailForm: play.api.libs.json.Writes[UserEmailForm] = new play.api.libs.json.Writes[UserEmailForm] {
      def writes(x: UserEmailForm) = play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.Json.toJson(x.email)
      )
    }

    implicit def jsonReadsCalatravaUserUpdateForm: play.api.libs.json.Reads[UserUpdateForm] = {
      (
        (__ \ "first_name").readNullable[String] and
        (__ \ "last_name").readNullable[String] and
        (__ \ "password").readNullable[String]
      )(UserUpdateForm.apply _)
    }

    implicit def jsonWritesCalatravaUserUpdateForm: play.api.libs.json.Writes[UserUpdateForm] = {
      (
        (__ \ "first_name").writeNullable[String] and
        (__ \ "last_name").writeNullable[String] and
        (__ \ "password").writeNullable[String]
      )(unlift(UserUpdateForm.unapply _))
    }
  }
}
