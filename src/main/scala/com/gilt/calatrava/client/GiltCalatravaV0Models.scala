/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 * apidoc:0.11.27 http://www.apidoc.me/gilt/calatrava/0.0.1-dev/scala_models
 */
package com.gilt.calatrava.v0.models {

  import com.codahale.jerkson.JsonSnakeCase

  /**
   * Authorization information for a user
   */
  case class Auth(
    token: String,
    expires: _root_.org.joda.time.DateTime
  )

  case class AwsSink(
    kinesisStreamName: String,
    kinesisEndpoint: String,
    s3BucketName: String,
    iamRoleArn: String
  )

  /**
   * The representation of a bridge for event changes. On source table change trigger
   * generates change events which are stored in log table and then published to
   * Kinesis.
   */
  case class Bridge(
    id: String,
    databaseId: String,
    source: com.gilt.calatrava.v0.models.Table,
    trigger: com.gilt.calatrava.v0.models.Trigger,
    log: com.gilt.calatrava.v0.models.Table,
    sink: com.gilt.calatrava.v0.models.AwsSink,
    status: com.gilt.calatrava.v0.models.Status,
    pagerDutyServiceKey: _root_.scala.Option[String] = None
  )

  /**
   * All data required to activate event streaming on specific database table.
   */
  case class BridgeForm(
    databaseId: String,
    source: com.gilt.calatrava.v0.models.Table,
    log: com.gilt.calatrava.v0.models.Table,
    sink: com.gilt.calatrava.v0.models.AwsSink,
    pagerDutyServiceKey: _root_.scala.Option[String] = None
  )

  @JsonSnakeCase
  case class ChangeEvent(
    id: String,
    entityKey: _root_.scala.Option[String] = None,
    beforeJson: _root_.scala.Option[String] = None,
    afterJson: _root_.scala.Option[String] = None,
    timestamp: _root_.org.joda.time.DateTime
  )

  case class Database(
    id: String,
    organizationId: String,
    connectionString: String,
    user: String,
    password: String,
    dbType: com.gilt.calatrava.v0.models.DbType
  )

  /**
   * The form used to create a new database.
   */
  case class DatabaseForm(
    organizationId: String,
    connectionString: String,
    user: String,
    password: String,
    dbType: com.gilt.calatrava.v0.models.DbType
  )

  case class Error(
    code: String,
    message: String
  )

  case class Healthcheck(
    status: String
  )

  case class Info(
    name: String,
    version: String,
    scalaVersion: String,
    sbtVersion: String
  )

  /**
   * A structure to contain result of getting log entries
   */
  case class LogEntriesResult(
    entries: Seq[com.gilt.calatrava.v0.models.LogEntry],
    totalCount: Int,
    filterCount: Int
  )

  /**
   * A log entry for the bridge log.
   */
  case class LogEntry(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    level: com.gilt.calatrava.v0.models.LogLevel,
    message: String,
    before: _root_.scala.Option[String] = None,
    after: _root_.scala.Option[String] = None
  )

  /**
   * The form used for logging in.
   */
  case class LoginForm(
    email: String,
    password: String
  )

  case class Organization(
    id: String,
    name: String
  )

  /**
   * The form used to reset a user's password.
   */
  case class PasswordResetForm(
    password: String,
    token: String
  )

  @JsonSnakeCase
  case class SinkEvent(
    event: _root_.scala.Option[com.gilt.calatrava.v0.models.ChangeEvent] = None,
    eventObjectKey: _root_.scala.Option[String] = None
  )

  case class Table(
    schema: String,
    name: String
  )

  case class Trigger(
    enableCode: String,
    disableCode: String
  )

  /**
   * A user is a real-world person who is using the Calatrava service. The user signs
   * up for Calatrava, and then interacts with the service through the APIs. Every
   * call to the API needs to use a token that is obtained after a successful login.
   */
  case class User(
    firstName: String,
    lastName: String,
    email: String
  )

  /**
   * The form used to create a new user.
   */
  case class UserCreateForm(
    firstName: String,
    lastName: String,
    password: String,
    confirmationToken: String
  )

  /**
   * The form used for passing an email (register, forgot password, user add, user
   * remove).
   */
  case class UserEmailForm(
    email: String
  )

  /**
   * A form for updating a user information.
   */
  case class UserUpdateForm(
    firstName: _root_.scala.Option[String] = None,
    lastName: _root_.scala.Option[String] = None,
    password: _root_.scala.Option[String] = None
  )

  sealed trait DbType

  object DbType {

    case object Postgres92 extends DbType { override def toString = "postgres92+" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends DbType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Postgres92)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): DbType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[DbType] = byName.get(value.toLowerCase)

  }

  sealed trait LogLevel

  object LogLevel {

    case object Debug extends LogLevel { override def toString = "debug" }
    case object Info extends LogLevel { override def toString = "info" }
    case object Warn extends LogLevel { override def toString = "warn" }
    case object Error extends LogLevel { override def toString = "error" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends LogLevel

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Debug, Info, Warn, Error)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): LogLevel = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[LogLevel] = byName.get(value.toLowerCase)

  }

  sealed trait Status

  object Status {

    case object Enabled extends Status { override def toString = "enabled" }
    case object Disabled extends Status { override def toString = "disabled" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Status

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Enabled, Disabled)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Status = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Status] = byName.get(value.toLowerCase)

  }

}